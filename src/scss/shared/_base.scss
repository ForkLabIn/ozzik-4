@import "vars";

/* ======= General Style ======= */
body {
	margin: 0;
	color: $color-text;
	font-size: .85em;
	line-height: 1.5;
	background: $color-background;
}

body,
input,
textarea,
.meta { font-family: 'Bitter', serif; }

.titlelike,
h1,
h2,
h3,
.teaserline-tag,
.project-button {
	font-family: 'Cabin', serif;
	font-weight: bold;
	font-size: .95rem;
}
h3 {
	text-transform: uppercase;
	font-size: .75rem;
	letter-spacing: .08em;
}
.title-colored { color: $color-main-light; }

ul,
ol,
dl {
	margin: 0;
	padding: 0;
	list-style: none;
}
dd,
dt { @extend %column-raw; }
dd {
	margin-left: .35rem;

	&:not(:last-child) { margin-bottom: .35rem; }
}

p {
	&:first-child { margin-top: 0; }
	&:last-child { margin-bottom: 0; }
}

/* ======= Images ======= */
.contact-link,
.back-button::before,
.project-button.dead::before,
.project-cue::before,
.strip-button-content::before {
	background-image: image-url("ui.png", false, false);

	@include retina {
		background-image: image-url("ui@2x.png", false, false);
		background-size: 132px 88px;
	}
}

/* ======= Layout ======= */
html,
body,
.v-home { height: 100%; }

.wrapper { margin: 0 auto; }

.va-wrapper {
	display: table;
	width: 100%;
	height: 100%;
}
.va-content {
	display: table-cell;
	vertical-align: middle;
	@extend .centered;
}

/* ======= Grid ======= */
.columns { letter-spacing: -.25rem; }
.column {
	@extend %column-top;

	&:not(:first-child) { margin-left: $size-grid-gutter; }

	*:first-child { margin-top: 0; }
	&.self { margin-left: 0; }
}
@for $i from 1 to 5 {
	.column-#{$i} { width: ($size-grid-column * $i) + ($size-grid-gutter * ($i - 1)); }
}
.column-mid { vertical-align: middle; }

/* ======= Text Styles ======= */
.crowded { line-height: 1.25; }
.centered { text-align: center; }
.justified {
	text-align: justify;
	text-align-last: justify;

	&::after {
		@extend %column-pseudo;
		width: 100%;
	}
}
// Hack, so it would override .centered
.lefted { text-align: left; }

/* ======= Transitions ======= */
// Properties
.transformable { @include transition-transform($duration $easing-cubic); }
.transformable-rough { @include transition-transform($duration $easing-cubic-rough); }
.transformable-rough-slow { @include transition-transform($duration * 1.5 $easing-cubic-rough); }
.transformable-toned { @include transition-transform($duration * 1.5 ease-out); }

.widthable { @include transition(width $duration $easing-cubic-out); }
.fadable { @include transition(opacity $duration $easing-cubic-out); }

.t-out { @include transition-timing-function(ease-out !important); }
.t-normal { @include transition-duration($duration !important); }

// Flock-based delays
@for $i from 1 to 13 {
	.flock > :nth-child(#{$i}),
	.flock > :nth-child(#{$i}) .flockable,
	.flock-out > :nth-last-child(#{$i}),
	.flock-out > :nth-last-child(#{$i}) .flockable { @include transition-delay(.04s * $i); }
}
// Fixed delays
@for $i from 1 to 10 {
	.d#{$i} { @include animation-delay(.05s * $i !important); }
}

/* ======= Hacks/Transforms ======= */
.showcase-art *:not(.s-sketch),
.will-change { @include transform(translate3d(0,0,0)); }

/* ======= States ======= */
.hidden { display: none; }
.transparent {
	opacity: 0 !important;
	pointer-events: none;
}
.opaque { opacity: 1 !important; }
.blocked { overflow-y: hidden !important; } // Preventing page scroll when being/starting inside project
.stacked:not(.active) { z-index: -1; }